import Head from "next/head";
import Image from "next/image";
import { Griffy, Inter, Prompt } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  Box,
  Button,
  FormControlLabel,
  Grid,
  IconButton,
  Paper,
  Radio,
  TextField,
  Typography,
} from "@mui/material";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";
import AddIcon from "@mui/icons-material/Add";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import React, { ChangeEvent, useState } from "react";
import { SettingsApplicationsSharp } from "@mui/icons-material";
import DynamicTwoInput from "./test";
import DynamicInput from "./test";

export default function Home() {
  const [checked, setChecked] = useState(false);
  // const [data, setData] = useState([{ detail: "" }, { detail: "" }]);
  // console.log(data);

  // const handleAdd = () => {
  //   setData([...data, { detail: "" }]);
  // };
  // const handleChange = (e: React.ChangeEvent<HTMLInputElement>, i) => {
  //   const { name, value } = e.target;
  //   const onchangeVal = [...data];
  //   onchangeVal[i][name] = value;
  //   setData(onchangeVal);
  // };
  // const handleDelete = (i: any) => {
  //   const deleteVal = [...data];
  //   deleteVal.splice(i, 1);
  //   setData(deleteVal);
  // };

  // const [allData, setAllData] = useState([{ question: "" }]);

  // const handleAddQuestion = () => {
  //   setAllData([...allData, { question: "" }]);
  // };
  // const handleQuestionChange = (e: React.ChangeEvent<HTMLInputElement>, i) => {
  //   const { name, value } = e.target;
  //   const onchangeAllVal = [...allData];
  //   onchangeAllVal[i][name] = value;
  //   setData(onchangeAllVal);
  // };

  ///////////////////////////////////////////////////////////////////////////////

  const [allData, setAllData] = useState([
    {
      question: "",
      description: [{ detail: "" }, { detail: "" }],
    },
  ]);

  const handleAddQuestion = () => {
    let _allData = [...allData];
    _allData.push({
      question: "",
      description: [
        {
          detail: "",
        },
        {
          detail: "",
        },
      ],
    });
    setAllData(_allData);
  };

  const handleQuestionChange = (e: React.ChangeEvent<HTMLInputElement>, i) => {
    const { name, value } = e.target;
    const _allData = [...allData] as any;
    _allData[i][name] = value;
    setAllData(_allData);
  };

  const handleDescriptionChange=(e: React.ChangeEvent<HTMLInputElement>, i, j)=>{
    const {name,value}=e.target
    const _allData = [...allData];
    _allData[i].description[j][name] = value;
    setAllData(_allData)
    console.log(allData)
}

  const handleAddDescription = (i: number) => {
    let _allData = [...allData];
    _allData[i].description.push({
      detail: "",
    });
    setAllData(_allData);
  };

  const handleDescriptionDelete = (i, j) => {
    const deleteVal = [...allData];
    deleteVal[i].description.splice(j, 1)
    setAllData(deleteVal);
  };

  const handleQuestionDelete = (i: any) => {
    const deleteVal = [...allData];
    deleteVal.splice(i, 1);
    setAllData(deleteVal);
  };


  return (
    <>
      <Head>
        <title>Foxbith Questionnaire</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid
        sx={{ "& button": { m: 1 } }}
        paddingY={1}
        className={styles.navBar}
      >
        <Grid className={styles.logo} marginY={2} marginLeft={3}>
          ðŸ¦Š Foxbith Questionnaire
        </Grid>
        <hr />
        <Grid
          margin={1.5}
          display={"flex"}
          justifyContent={"flex-end"}
          alignItems={"center"}
        >
          <Button
            variant="outlined"
            size="large"
            sx={{
              color: "#FF5C00",
              border: "1px solid #FF5C00",
              "&:hover": { borderColor: "#d95000" },
              px: 2,
            }}
          >
            cancel
          </Button>

          <Button
            variant="contained"
            size="large"
            sx={{
              color: "#FFF",
              backgroundColor: "#FF5C00",
              "&:hover": { backgroundColor: "#d95000" },
              width: 180,
              px: 2,
            }}
          >
            save
          </Button>
        </Grid>
      </Grid>

      {/* Question */}
      <Box component="form" sx={{ background: "#F3F4F6" }}>
        <Paper sx={{ margin: 3 }}>
          <Grid sx={{ p: 3 }}>
            <Typography className={styles.question} paddingBottom={3}>
              Questionnaire Detail
            </Typography>
            <TextField required id="outlined-required" label="Name" fullWidth />
          </Grid>
          <hr />


          {allData.map((allval, i) => (
            <Grid sx={{ p: 3 }}>
              <Grid>
                <Typography className={styles.question} paddingBottom={3}>
                  Question {i+1}
                </Typography>
                <TextField
                  required
                  id="outlined-required"
                  sx={{ mb: 3 }}
                  fullWidth
                  label="Question"
                  name="question"
                  value={allval.question}
                  onChange={(e) => handleQuestionChange(e, i)}
                />

                {/* description */}
                {allval.description.map((val, j) => (
                  <Grid display={"flex"} alignItems={"center"} sx={{ mb: 3 }}>
                    <FormControlLabel
                      value="correct"
                      label=""
                      control={
                        <Radio
                          checked={checked}
                          onClick={() => setChecked(!checked)}
                          value="check"
                        />
                      }
                    />

                    <TextField
                      required
                      id="outlined-required"
                      fullWidth
                      label="Description"
                      name="detail"
                      value={val.detail}
                      onChange={(e) => handleDescriptionChange(e, i, j)}
                    />

                    <IconButton
                      aria-label="delete"
                      onClick={() => handleDescriptionDelete(i, j)}
                    >
                      <DeleteOutlineIcon />
                    </IconButton>
                  </Grid>
                ))}

                <Button
                  variant="text"
                  sx={{
                    color: "#FF5C00",
                    "&:hover": { color: "#d95000" },
                  }}
                  startIcon={<AddIcon />}
                  onClick={() => {
                    handleAddDescription(i);
                  }}                >
                  ADD CHOICE
                </Button>
                <hr className={styles.hr} />
                <Grid>
                  <Button
                    variant="text"
                    sx={{
                      color: "#000",
                      "&:hover": { color: "#123456" },
                    }}
                    startIcon={<ContentCopyIcon />}
                  >
                    DUPLICATE
                  </Button>
                  <Button
                    variant="text"
                    sx={{
                      color: "#000",
                      "&:hover": { color: "#ff0000" },
                    }}
                    startIcon={<DeleteOutlineIcon />}
                    onClick={() => handleQuestionDelete(i)}
                  >
                    DELETE
                  </Button>
                </Grid>
              </Grid>
            </Grid>
          ))}
          

          <hr />
          
          <Grid
            display={"flex"}
            flexDirection={"column"}
            // sx={{ "& button": { m: 1 } }}
            className={styles.navBar}
            p={3}
          >
            <Button
              variant="outlined"
              size="large"
              sx={{
                color: "#FF5C00",
                border: "1px solid #FF5C00",
                "&:hover": { borderColor: "#d95000", color: "#d95000" },
                px: 2,
              }}
              startIcon={<AddIcon />}
              onClick={handleAddQuestion}
            >
              Add Question
            </Button>
          </Grid>
        </Paper>
      </Box>
      {/* <DynamicInput/>  */}
    </>
  );
}
